pipeline {
    agent any
    environment {
        REPO_URL = 'https://github.com/tanmay910/Devops_Course_Project.git'
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        ENV_FILE_PATH = '/var/lib/jenkins/.env'
        AWS_IP_ADDRESS = ''
    }
    
    stages {
        stage('Checkout') {
            steps {
                git url: "${REPO_URL}", branch: 'master'
            }
        }
        stage('Copy .env File') {
            steps {
                script {
                    sh "cp /var/lib/jenkins/.env ${WORKSPACE}/.env"
                }
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    // Build Docker images for all services
                    sh "docker-compose --env-file ${ENV_FILE_PATH} -f ${DOCKER_COMPOSE_FILE} build"
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        // Login to Docker Hub
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                        
                        // Push all images
                        sh """
                            docker push tanmay910/user:latest
                            docker push tanmay910/cart:latest
                            docker push tanmay910/product:latest
                            docker push tanmay910/frontend:latest
                        """
                    }
                }
            }
        }
        stage('Run Docker Compose') {
            steps {
                script {
                    // Start all services
                    sh "docker-compose --env-file ${ENV_FILE_PATH} -f ${DOCKER_COMPOSE_FILE} up -d"
                }
            }
        }
        stage('Test Frontend Website') {
            steps {
                script {
                    // Test if the frontend is running
                    sh "curl -s http://AWS_IP_ADDRESS:3000 || exit 1"
                }
            }
        }
    }
    post {
        always {
            steps {
                script {
                    // Stop and clean up containers
                    sh "docker-compose --env-file ${ENV_FILE_PATH} -f ${DOCKER_COMPOSE_FILE} down"
                }
                // Archive any logs or artifacts
                archiveArtifacts artifacts: '**/logs/*', allowEmptyArchive: true
            }
        }
    }
}
